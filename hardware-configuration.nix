# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/9486bbd0-291e-4398-835f-c21691e5f8ae";
      fsType = "ext4";
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/39e40151-a62f-4382-9c77-0234c05777f5";
      fsType = "ext4";
    };

  fileSystems."/mnt" =
    { device = "";
      fsType = "none";
      options = [ "bind" ];
    };

  fileSystems."/mnt/dev" =
    { device = "devtmpfs";
      fsType = "devtmpfs";
    };

  fileSystems."/mnt/dev/pts" =
    { device = "devpts";
      fsType = "devpts";
    };

  fileSystems."/mnt/dev/shm" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/mnt/dev/mqueue" =
    { device = "mqueue";
      fsType = "mqueue";
    };

  fileSystems."/mnt/dev/hugepages" =
    { device = "hugetlbfs";
      fsType = "hugetlbfs";
    };

  fileSystems."/mnt/proc" =
    { device = "proc";
      fsType = "proc";
    };

  fileSystems."/mnt/sys" =
    { device = "sysfs";
      fsType = "sysfs";
    };

  fileSystems."/mnt/sys/kernel/security" =
    { device = "securityfs";
      fsType = "securityfs";
    };

  fileSystems."/mnt/sys/fs/cgroup" =
    { device = "cgroup2";
      fsType = "cgroup2";
    };

  fileSystems."/mnt/sys/fs/pstore" =
    { device = "pstore";
      fsType = "pstore";
    };

  fileSystems."/mnt/sys/firmware/efi/efivars" =
    { device = "efivarfs";
      fsType = "efivarfs";
    };

  fileSystems."/mnt/sys/fs/bpf" =
    { device = "bpf";
      fsType = "bpf";
    };

  fileSystems."/mnt/sys/kernel/debug" =
    { device = "debugfs";
      fsType = "debugfs";
    };

  fileSystems."/mnt/sys/kernel/tracing" =
    { device = "tracefs";
      fsType = "tracefs";
    };

  fileSystems."/mnt/sys/fs/fuse/connections" =
    { device = "fusectl";
      fsType = "fusectl";
    };

  fileSystems."/mnt/sys/kernel/config" =
    { device = "configfs";
      fsType = "configfs";
    };

  fileSystems."/mnt/run" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/mnt/run/keys" =
    { device = "ramfs";
      fsType = "ramfs";
    };

  fileSystems."/mnt/run/credentials/systemd-journald.service" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/mnt/run/wrappers" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/mnt/run/credentials/getty@tty1.service" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/mnt/run/user/1000" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/mnt/sys/firmware/efi/efivars" =
    { device = "/mnt/sys/firmware/efi/efivars";
      fsType = "none";
      options = [ "bind" ];
    };

  fileSystems."/mnt/sys/firmware/efi/efivars" =
    { device = "/mnt/sys/firmware/efi/efivars";
      fsType = "none";
      options = [ "bind" ];
    };

  fileSystems."/boot/efi" =
    { device = "/dev/disk/by-uuid/BE24-14F0";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  fileSystems."/boot/efi" =
    { device = "/boot/efi";
      fsType = "none";
      options = [ "bind" ];
    };

  fileSystems."/boot/efi" =
    { device = "/boot/efi";
      fsType = "none";
      options = [ "bind" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp10s0u6i2.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
